!<arch>
0-isupper.c/    0           0     0     644     217       `
#include "main.h"
#include "main.h"

/**
 * _isupper - check for upper case letter
 * @c : character to check the case
 * Return:0 or 1
 */

int _isupper(int c)
{
if (c >= 65 && c <= 90)
{
return (1);
}
return (0);
}

0-memset.c/     0           0     0     644     457       `
#include "main.h"

/**
 *_memset - fills memory with a constant byte.
 *fills the first n bytes of the memory area pointed
 *to by s with the constant b.
 *@s: pointer to memory area.
 *@b: constant to fill memory with.
 *@n: bytes of the memory area to be filled.
 *
 *Return: pointer to memory area s.
 */

char *_memset(char *s, char b, unsigned int n)
{
unsigned int counter;

for (counter = 0; counter < n; counter++)
{
s[counter] = b;
}
return (s);
}

0-strcat.c/     0           0     0     644     459       `
#include "main.h"

/**
 *_strcat - function that concatenates two strings.
 *@dest: pointer to destination string.
 *@src: pointer to source string.
 *
 *Return: pointer to destination string.
 */

char *_strcat(char *dest, char *src)
{
int length, j; /* j will hold the length of the source */

length = 0;
while (dest[length] != '\0')
{
length++;
}
for (j = 0; src[j] != '\0'; j++, length++)
{
dest[length] = src[j];
}
dest[length] = '\0';
return (dest);
}

100-atoi.c/     0           0     0     644     585       `
#include <stdio.h>
#include "main.h"

/**
 * _atoi - This function converts a string to an integer.
 * @s: Pointer parameter
 * Return: returns an integer value
 */

int _atoi(char *s)
{

unsigned int count = 0, size = 0, j = 0, k = 1, m = 1, i;

while (*(s + count) != '\0')
{

if (size > 0 && (*(s + count) < '0' || *(s + count) > '9'))
break;

if (*(s + count) == '-')
k *= -1;

if ((*(s + count) >= '0') && (*(s + count) <= '9'))
{

if (size > 0)
m *= 10;
size++;
}
count++;
}

for (i = count - size; i < count; i++)
{
j = j + ((*(s + i) - 48) * m);
m /= 10;
}

return (j * k);

}

1-isdigit.c/    0           0     0     644     209       `
#include "main.h"

/**
 * _isdigit - checks if a character is digit
 * @c: carrier variable
 * Return: 1 if true, 0 if false
 */

int _isdigit(int c)
{
if (c >= '0' && c <= '9')
return (1);
else
return (0);
}

1-memcpy.c/     0           0     0     644     352       `
#include "main.h"

/**
 * char *_memcpy - copies n bytes from memory area src to memory area dest
 * @dest: destination
 * @src: source
 * @n: number of bytes
 * Return: pointer to dest
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{

int size = n;

if (size > 0)
{

int i;

for (i = 0; i < size; i++)
dest[i] = src[i];
}

return (dest);
}
1-strncat.c/    0           0     0     644     662       `
#include "main.h"

/**
 *_strncat - function that concatenates two strings. it will use
 * at most n bytes from src. src does not need to be null terminated.
 *@dest: pointer to destination string.
 *@src: pointer to source string.
 *@n: number of bytes to be concatenated.
 *
 *Return: pointer to destination string.
 */

char *_strncat(char *dest, char *src, int n)
{
int length, j;
/* j is a counter for  n bytes of src to be concatenated */
/* length = length of destination string */

length = 0;
while (dest[length] != '\0')
{
length++;
}
for (j = 0; j < n && src[j] != '\0'; j++, length++)
{
dest[length] = src[j];
}
dest[length] = '\0';
return (dest);
}
2-strchr.c/     0           0     0     644     356       `
#include "main.h"
#define NULL 0

/**
 * _strchr - locate 1st occurrence of char in string and returns pointer there
 * @s: string to search
 * @c: target characer
 * Return: pointer to that character in string
 */

char *_strchr(char *s, char c)
{

int i = 0;

while (s[i] != '\0' && s[i] != c)
i++;

if (s[i] == c)
return (&s[i]);

else
return (NULL);
}
2-strlen.c/     0           0     0     644     247       `
#include "main.h"

/**
 *_strlen -length of a string
 *@s: A pointer to an int that will be changed/updated
 *
 *Return: void that means our answer is correct
 */

int _strlen(char *s)
{

int u;
u = 0;

while (s[u] != '\0')
{
u++;
}
return (u);
}

2-strncpy.c/    0           0     0     644     373       `
#include "main.h"

/**
 *_strncpy - copies a string
 *@dest: A pointer to a character that will be changed
 *@src: A pointer to a character that will be changed
 *@n: value
 *Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
int i;	
i = 0;

while (i < n && src[i] != '\0')
{
dest[i] = src[i];
i++;
}

while (i < n)
{
dest[i] = '\0';
i++;
}

return (dest);
}

3-islower.c/    0           0     0     644     214       `
#include "main.h"
/**
 * _islower - Short description, single line
 * @c: contains value to be compared
 * Return: Always 0.
 */
int _islower(int c)
{
if (c > 'a' && c < 'z')
{
return (1);
}
else
{
return (0);
}
}
3-puts.c/       0           0     0     644     270       `
#include "main.h"

/**
 *_puts - prints a string
 *@str: A pointer to an int that will be changed
 *
 *Return: void which means our answer is correct
 */

void _puts(char *str)
{

char *c;

int m;

c = str;

for (m = 0; c[m]; m++)
{
_putchar (c[m]);
}
_putchar('\n');
}
3-strcmp.c/     0           0     0     644     476       `
#include "main.h"

/**
 *_strcmp - compares two strings.
 *@s1: pointer to first string.
 *@s2: pointer to second string.
 *
 *Return: value less than 0 if string is less than the other.
 *value greater than 0 if string is greater than the other.
 *0 if strings are equal.
 */

int _strcmp(char *s1, char *s2)
{
int counter, cmpVal;

counter = 0;
while (s1[counter] == s2[counter] && s1[counter] != '\0')
{
counter++;
}

cmpVal = s1[counter] - s2[counter];
return (cmpVal);
}
3-strspn.c/     0           0     0     644     643       `
#include "main.h"

/**
 * _strspn - return length of string that matches values consistently
 * @s: string to search
 * @accept: target matches
 * Return: number of bytes consecutively matched
 */

unsigned int _strspn(char *s, char *accept)
{

int i = 0, j;
int matches = 0;

while (s[i] != '\0') /*iterate through string*/
{

for (j = 0; accept[j] != '\0'; j++) /*iterate through target*/

{
if (s[i] == accept[j]) /*record & break at first match*/
{

matches++;
break;
}

if (accept[j + 1] == '\0' && s[i] != accept[j])

return (matches);/*return if idx doesn't match*/
}

i++;
}

return (matches); /* return num if all match till end */
}

4-isalpha.c/    0           0     0     644     249       `
#include "main.h"

/**
 * _isalpha - Return 1 if c is a letter. lowercase or uppercase
 *
 *@c: The int to print
 * Return: Always 0.
 */
int _isalpha(int c)
{
if ((c > 'a' && c < 'z') || (c > 'A' && c < 'Z'))
{
return (1);
}
else
{
return (0);
}
}

4-strpbrk.c/    0           0     0     644     420       `
#include "main.h"
#define NULL 0

/**
 * _strpbrk - return pointer to byte in s that matches a byte in accept
 * @s: string to search
 * @accept: target matches
 * Return: pointer to index of string at first occurence
 */

char *_strpbrk(char *s, char *accept)
{
int x = 0, y;

while (s[x] != '\0')
{
for (y = 0; accept[y] != '\0'; y++)
{

if (s[x] == accept[y])
{
s = &s[x];
return (s);
}

}

x++;
}

return (NULL);

}
5-strstr.c/     0           0     0     644     795       `
#include "main.h"
#define NULL 0

/**
 * _strstr - locate and return pointer to first occurence of substring
 * @haystack: string to search
 * @needle: target substring to search for
 * Return: pointer to index of string at first occurence of whole substring
 */

char *_strstr(char *haystack, char *needle)
{
int i = 0, j, x;

if (needle[0] == '\0')
return (haystack);

while (haystack[i] != '\0') /* iterate through haystack */
{
/* if a byte matches first char of needle */
/* interate through needle until match ends */

if (haystack[i] == needle[0])
{
x = i, j = 0;

while (needle[j] != '\0')

{
if (haystack[x] == needle[j])
x++, j++;

else
break;
} /* if matched throughout, return haystack */

if (needle[j] == '\0')
{
return (haystack + i);
}
}

i++;
}

return (NULL); /* No match */
}

6-abs.c/        0           0     0     644     225       `
#include "main.h"
#include <stdio.h>
/**
 * _abs - value absolute
 *
 *@n: The int to print
 * Return: Always 0.
 */
int _abs(int n)
{
if (n < 0)
{
return (n * (-1));
}
else if (n == 0)
{
return (0);
}
else
{
return (n);
}
}

9-strcpy.c/     0           0     0     644     350       `
#include <stdio.h>
#include "main.h"

/**
 * _strcpy - This function copies a string pointed to src and dest
 * @dest: poiter parameter
 * @src: poiter parameter
 * Author: Kebdralene
 * Return: char
 */

char *_strcpy(char *dest, char *src)
{

int i;

for (i = 0; *(src + i) != '\0'; i++)
{
dest[i] = *(src + i);
}
dest[i] = '\0';

return (dest);
}
main.c/         0           0     0     644     140       `
#include "main.h"

int main(void)
{
_puts("\"At the endnof the day, my goal was to be the best hacker\"\n\t- Kevin mitnick");
return (0);
}
_putchar.c/     0           0     0     644     234       `
#include <unistd.h>
/**
 *_putchar-writes the character c to stdout
 *@c: The character to print
 *Return: On success 1.
 *On error,-1 is returned, and erro is set appropriately.
 */
int _putchar(char c)
{
return (write(1, &c, 1));
}
